import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
import os

# Load dataset
filename = 'tele.csv'
if not os.path.exists(filename):
    print(f"❌ Error: '{filename}' not found.")
    exit()

data = pd.read_csv(filename)

# Check if Churn column exists
if 'Churn' not in data.columns:
    print("❌ Error: 'Churn' column is missing in the dataset.")
    exit()

# Drop customerID if it exists
if 'customerID' in data.columns:
    data.drop('customerID', axis=1, inplace=True)

# Convert TotalCharges to numeric
if 'TotalCharges' in data.columns:
    data['TotalCharges'] = pd.to_numeric(data['TotalCharges'], errors='coerce')

# Fill missing numeric values with column mean
data.fillna(data.mean(numeric_only=True), inplace=True)

# Convert Churn column to binary
data['Churn'] = data['Churn'].str.strip().str.lower().map({'yes': 1, 'no': 0})

# Encode categorical columns
categorical_cols = data.select_dtypes(include=['object']).columns.drop('Churn', errors='ignore')
data = pd.get_dummies(data, columns=categorical_cols, drop_first=True)

# Split features and target
X = data.drop('Churn', axis=1)
y = data['Churn']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train RandomForest model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluation
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Feature importance
importances = pd.Series(model.feature_importances_, index=X.columns)
top_features = importances.sort_values(ascending=False).head(10)
print("\nTop 10 Important Features:")
print(top_features)

# Plot top features
plt.figure(figsize=(10, 6))
sns.barplot(x=top_features.values, y=top_features.index)
plt.title("Top 10 Features Influencing Churn")
plt.xlabel("Importance")
plt.tight_layout()
plt.show()

# Save model
joblib.dump(model, 'churn_model.pkl')
print("\n✅ Model saved as 'churn_model
